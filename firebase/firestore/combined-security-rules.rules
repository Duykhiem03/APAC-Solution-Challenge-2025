// Combined Firestore security rules for users and messages
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isCurrentUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isUserInConversation(conversationId) {
      let conversation = get(/databases/$(database)/documents/conversations/$(conversationId));
      return isSignedIn() && conversation != null && request.auth.uid in conversation.data.participants;
    }
    
    // Data validation helper functions
    function isValidMessage(message) {
      return message.size() >= 6 &&                   // Message must have at least 6 fields
             'conversationId' in message &&           // Required fields exist
             'sender' in message &&
             'messageType' in message &&
             'text' in message &&
             'timestamp' in message &&
             message.conversationId is string &&      // Type checking
             message.sender is string &&
             message.messageType is string &&
             message.text is string &&
             (
               !('version' in message) || message.version is number // Optional version field must be number
             ) &&
             (
               message.messageType != 'LOCATION' ||  // If message type is LOCATION, validate location fields
               (
                 'location' in message &&
                 message.location is map &&
                 'latitude' in message.location &&
                 'longitude' in message.location &&
                 message.location.latitude is number &&
                 message.location.latitude >= -90 &&
                 message.location.latitude <= 90 &&
                 message.location.longitude is number &&
                 message.location.longitude >= -180 &&
                 message.location.longitude <= 180
               )
             ) &&
             (
               !('mediaUrl' in message) ||                   // Media URL if present must be string
               message.mediaUrl is string
             );
    }
    
    function isValidConversation(conversation) {
      return conversation.size() >= 5 &&              // Conversation must have at least 5 fields
             'participants' in conversation &&        // Required fields exist
             'createdAt' in conversation &&
             'updatedAt' in conversation &&
             'isGroup' in conversation &&
             conversation.participants is list &&     // Type checking
             conversation.isGroup is bool &&
             conversation.participants.size() >= 2 && // At least 2 participants
             (
               !conversation.isGroup ||               // Group name required for group chats
               (
                 'groupName' in conversation &&
                 conversation.groupName is string &&
                 conversation.groupName.size() >= 3 &&
                 conversation.groupName.size() <= 50
               )
             );
    }
    
    function isValidTypingStatus(typingStatus) {
      return typingStatus.size() >= 3 &&             // Typing status must have at least 3 fields
             'conversationId' in typingStatus &&     // Required fields exist
             'userId' in typingStatus &&
             'timestamp' in typingStatus &&
             'expiresAt' in typingStatus &&
             typingStatus.conversationId is string && // Type checking
             typingStatus.userId is string &&
             typingStatus.timestamp is timestamp &&
             typingStatus.expiresAt is timestamp;
    }
    
    // Users collection rules
    // All users can read any user's profile
    // But only the user can write to their own profile
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update, write: if isCurrentUser(userId);
    }
    
    // Messages collection
    match /messages/{messageId} {
      // Allow read if the user is a participant in the conversation
      allow read: if isSignedIn() && isUserInConversation(resource.data.conversationId);
      
      // Allow create if the user is a participant in the conversation and data is valid
      allow create: if isSignedIn() && 
                      isUserInConversation(request.resource.data.conversationId) && 
                      request.resource.data.sender == request.auth.uid &&
                      isValidMessage(request.resource.data);
      
      // Allow updates only to specific fields for delivery status management
      allow update: if isSignedIn() && (
        // Allow the sender to update any field if resulting document is valid
        (resource.data.sender == request.auth.uid && isValidMessage(request.resource.data)) ||
        
        // Allow participants to update only read-related fields
        (
          isUserInConversation(resource.data.conversationId) && 
          request.resource.data.diff(resource.data).affectedKeys()
              .hasOnly(['read', 'readBy', 'deliveryStatus', 'version']) &&
          (
            // Only allow specific status progressions
            !("deliveryStatus" in request.resource.data.diff(resource.data).affectedKeys()) ||
            (
              resource.data.deliveryStatus == "SENDING" && request.resource.data.deliveryStatus in ["SENT", "DELIVERED", "READ"] ||
              resource.data.deliveryStatus == "SENT" && request.resource.data.deliveryStatus in ["DELIVERED", "READ"] ||
              resource.data.deliveryStatus == "DELIVERED" && request.resource.data.deliveryStatus == "READ"
            )
          ) &&
          // Verify version increment for concurrency control
          (!("version" in request.resource.data.diff(resource.data).affectedKeys()) || 
            request.resource.data.version == resource.data.version + 1)
        )
      );
      
      // Only allow delete if the user is the sender
      allow delete: if isSignedIn() && resource.data.sender == request.auth.uid;
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Allow read if the user is a participant
      allow read: if isSignedIn() && request.auth.uid in resource.data.participants;
      
      // Allow create if the user includes themselves as a participant and data is valid
      allow create: if isSignedIn() && 
                      request.auth.uid in request.resource.data.participants &&
                      isValidConversation(request.resource.data);
      
      // Allow updates if the user is a participant and the resulting data is valid
      allow update: if isSignedIn() && 
                      request.auth.uid in resource.data.participants &&
                      isValidConversation(request.resource.data) &&
                      // Verify version increment for concurrency control (if versioning is used)
                      (!("version" in request.resource.data) || !("version" in resource.data) || 
                       request.resource.data.version == resource.data.version + 1);
      
      // Only allow delete if all participants agree (not implemented currently)
      allow delete: if false;
    }
    
    // User status collection for online status
    match /userStatus/{userId} {
      // Users can only write their own status
      allow write: if isSignedIn() && request.auth.uid == userId;
      
      // Anyone can read status (could be restricted to contacts)
      allow read: if isSignedIn();
    }
    
    // Typing status collection
    match /typing/{typingId} {
      // Format: "conversationId_userId"
      // Allow reading individual typing documents by ID
      allow read: if isSignedIn() && 
                    typingId.split("_").size() == 2 && 
                    isUserInConversation(typingId.split("_")[0]);
      
      // Allow querying typing status by conversationId if user is in that conversation
      allow list: if isSignedIn() && 
                   (resource == null || isUserInConversation(resource.data.conversationId));
      
      // Users can only update their own typing status and data must be valid
      allow create: if isSignedIn() && 
                     typingId.split("_").size() == 2 && 
                     typingId.split("_")[1] == request.auth.uid &&
                     isUserInConversation(typingId.split("_")[0]) &&
                     isValidTypingStatus(request.resource.data);
                     
      allow update: if isSignedIn() && 
                     typingId.split("_").size() == 2 && 
                     typingId.split("_")[1] == request.auth.uid &&
                     isUserInConversation(typingId.split("_")[0]) &&
                     isValidTypingStatus(request.resource.data);
                     
      allow delete: if isSignedIn() && 
                     typingId.split("_").size() == 2 && 
                     typingId.split("_")[1] == request.auth.uid;
    }
    
    // User FCM tokens for notifications
    match /userFcmTokens/{tokenId} {
      // Users can only manage their own tokens
      allow read, write: if isSignedIn() && tokenId.matches(request.auth.uid + '_.*');
      
      // For delivery receipts, allow checking if token exists
      allow get: if isSignedIn();
    }
    
    // User chats metadata (unread counts, etc.)
    match /userChats/{userId} {
      // Users can only access their own chat metadata
      allow read, write: if isSignedIn() && userId == request.auth.uid;
    }
  }
}
